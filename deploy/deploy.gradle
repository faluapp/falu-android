apply plugin: "signing"
apply plugin: "maven-publish"
apply from: "${rootDir}/build-config/version.gradle.kts"

ext.getPublishUrl = { ->
    return System.getenv("PUBLISHING_URL") ?: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

ext["signing.keyId"] = System.getenv("SIGNING_KEY_ID")
ext["signing.password"] = System.getenv("SIGNING_PASSWORD")

// If the key content is in an environmental var, write it to "tmp/key.gpg" and update
// ext['signing.secretKeyRingFile'] to point to it
def keyContent = System.getenv("SIGNING_KEY")
if (keyContent != null) {
    def tempDirectory = new File("$rootProject.rootDir/tmp")
    mkdir tempDirectory
    def keyFile = new File("$tempDirectory/key.gpg")
    keyFile.createNewFile()
    def os = keyFile.newDataOutputStream()
    os.write(keyContent.decodeBase64())
    os.close()
    keyContent = ''

    ext['signing.secretKeyRingFile'] = keyFile.absolutePath
}

if (project.hasProperty('android')) {
    tasks.register('androidSourcesJar', Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
    }
}

afterEvaluate {
    // See https://developer.android.com/studio/build/maven-publish-plugin
    // and https://docs.gradle.org/current/userguide/publishing_maven.html
    // and https://proandroiddev.com/android-maven-publish-for-your-libraries-b76ad47677df
    publishing {
        // Creates a Maven publication called "release".
        publications {
            release(MavenPublication) {
                // Add Javadocs and Sources as separate jars.
                if (project.hasProperty('android')) {
                    artifact androidSourcesJar
                    artifact bundleReleaseAar
                } else if (project.hasProperty('artifactPath')) {
                    artifact project.artifactPath
                }

                groupId GROUP
                artifactId project.artifactId
                version publishVersion

                pom {
                    name = project.artifactName
                    packaging = "aar"
                    description = project.artifactDescription
                    url = "https://github.com/faluapp/falu-android"

                    scm {
                        url = "https://github.com/faluapp/falu-android"
                        connection = "scm:git:github.com/faluapp/falu-android"
                        developerConnection = "scm:git:ssh://github.com/faluapp/falu-android.git"
                    }

                    licenses {
                        license {
                            name = "MIT License"
                            url = "https://raw.githubusercontent.com/faluapp/falu-android/main/LICENSE"
                            distribution = "repo"
                        }
                    }

                    developers {
                        developer {
                            id = "falu"
                            name = "Falu"
                            email = "support@falu.io"
                        }
                    }
                }

                pom.withXml {
                    final dependenciesNode = asNode().appendNode("dependencies")
                    ext.addDependency = { dep, scope ->
                        logger.lifecycle("updating dep $dep")
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
                            return // invalid dependencies should be ignored
                        }

                        final depGroup = dep.group
                        final depName = dep.name
                        final depVersion = dep.version != 'unspecified' ? dep.version : publishVersion

                        final dependencyNode = dependenciesNode.appendNode("dependency")
                        dependencyNode.appendNode("groupId", depGroup)
                        dependencyNode.appendNode("artifactId", depName)
                        dependencyNode.appendNode("version", depVersion)
                        dependencyNode.appendNode("scope", scope)
                    }

                    if (configurations.hasProperty("api")) {
                        configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    }
                    if (configurations.hasProperty("implementation")) {
                        configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                    }
                }
            }
        }

        repositories {
            maven {
                url getPublishUrl()
                credentials {
                    username publishUsername
                    password publishPassword
                }
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign publishing.publications
}

artifacts {
    archives androidSourcesJar
}